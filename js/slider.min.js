!function (t) { function e(t) { return this.tags = {}, this.values = {}, this.eventsTrigger = s ? "touchend" : "mouseup", this.defaults = this.extend({ element: "", mainClass: "slider", min: 0, max: 1e3, range: !1, step: 1, point: null, division: null, beforeDivisionStep: 1, afterDivisionStep: 1, handleMinus: null, handlePlus: null, beforeOutSideClickStep: 1, afterOutSideClickStep: 1, create: function () { }, slide: function () { } }, t), !!this.defaults.element && (this.init(), this) } var s = /Android|iPhone|iPad|iPod|BlackBerry|WPDesktop|IEMobile|Opera Mini/i.test(navigator.userAgent), i = function (t, e) { var s = document.createElement("div"); return s.className = t, e && e.appendChild(s), s }; e.prototype = { init: function () { return this.createDOM(), this.defaults.create.call(this, this.tags.slider, this.defaults, this.tags.handleLeft, s), this.reinit(), this.events(this.tags.handleLeft, "triggerLeft"), this }, createDOM: function () { return this.tags = {}, this.tags.slider = this.defaults.element, this.tags.handleLeft = i(this.defaults.mainClass + "__handle " + this.defaults.mainClass + "__handle_left", this.tags.slider), this.tags.handleRange = i(this.defaults.mainClass + "__range ", this.tags.slider), delete this.defaults.element, this }, getValues: function () { return this.values.size = this.tags.slider.offsetWidth, this }, setValuesOutSide: function (t, e) { var s; return this.defaults.value = t, s = this.defaults.point && this.defaults.division ? this.defaults.value <= this.defaults.point ? this.defaults.value / this.defaults.point * this.defaults.division : (this.defaults.value - this.defaults.point) / (this.defaults.max - this.defaults.point) * 100 / 100 * this.defaults.division + this.defaults.division : this.defaults.value / this.defaults.max * 100, this.defaults.value <= this.defaults.min ? (s = 0, this.defaults.value = this.defaults.min) : this.defaults.value >= this.defaults.max && (s = 100, this.defaults.value = this.defaults.max), this.values[e] = !1, this.tags.handleLeft.style.left = s + "%", this.defaults.slide(this.defaults.value, this.defaults, this.tags.handleLeft), this }, setValues: function (t) { var e, s; this.defaults.min < this.defaults.max ? this.defaults.division && this.defaults.point && this.defaults.point > this.defaults.min && this.defaults.point < this.defaults.max ? t <= this.defaults.division ? (s = t / this.defaults.division, e = Math.round((this.defaults.min + Math.abs(-1 * this.defaults.min + this.defaults.point) * s) / this.defaults.beforeDivisionStep) * this.defaults.beforeDivisionStep) : (s = (t - this.defaults.division) / (100 - this.defaults.division), e = Math.round((this.defaults.point + Math.abs(-1 * this.defaults.point + this.defaults.max) * s) / this.defaults.beforeDivisionStep) * this.defaults.beforeDivisionStep) : (s = t / 100, e = Math.round((this.defaults.min + Math.abs(-1 * this.defaults.min + this.defaults.max) * s) / this.defaults.step) * this.defaults.step) : this.defaults.division && this.defaults.point && this.defaults.point > this.defaults.min && this.defaults.point < this.defaults.max ? t <= this.defaults.division ? (s = t / this.defaults.division, e = Math.round((this.defaults.min - Math.abs(-1 * this.defaults.min + this.defaults.point) * s) / this.defaults.beforeDivisionStep) * this.defaults.beforeDivisionStep) : (s = (t - this.defaults.division) / (100 - this.defaults.division), e = Math.round((this.defaults.point - Math.abs(-1 * this.defaults.point + this.defaults.max) * s) / this.defaults.afterDivisionStep) * this.defaults.afterDivisionStep) : (s = t / 100, e = Math.round((this.defaults.min - Math.abs(-1 * this.defaults.min + this.defaults.max) * s) / this.defaults.step) * this.defaults.step), t <= 0 ? e = this.defaults.min : t >= 100 && (e = this.defaults.max); var i = this.defaults.step.toString().split(".")[1]; i && (i = i.length); var a = function (t) { return +t.toFixed(i || 1) }; return this.defaults.value = a(e), this.defaults.slide(a(e), this.defaults, this.tags.handleLeft), this }, reinit: function () { return this.getValues(), this.setValues(0), this }, events: function (t, e) { var i = this; this.values[e] = !1; var a, u, n = s ? "touchstart" : "mousedown", l = s ? "touchmove" : "mousemove", d = s ? "touchend" : "mouseup"; if (this.defaults.handleMinus) { var f = document.querySelector(this.defaults.handleMinus); f && (f.addEventListener(n, function (t) { t.stopPropagation(), t.preventDefault(), i.setValuesOutSide(i.defaults.value - (i.defaults.value < i.defaults.point ? i.defaults.beforeOutSideClickStep : i.defaults.afterOutSideClickStep), "triggerLeft") }), f.addEventListener(d, function (t) { t.stopPropagation(), t.preventDefault() })) } if (this.defaults.handlePlus) { var h = document.querySelector(this.defaults.handlePlus); h && (h.addEventListener(n, function (t) { t.stopPropagation(), t.preventDefault(), i.setValuesOutSide(i.defaults.value + (i.defaults.value < i.defaults.point ? i.defaults.beforeOutSideClickStep : i.defaults.afterOutSideClickStep), "triggerLeft") }), h.addEventListener(d, function (t) { t.stopPropagation(), t.preventDefault() })) } return t.addEventListener("dragstart", function () { return !1 }), t.addEventListener(n, function (t) { t.stopPropagation(), i.values[e] = !0, u = (s ? t.touches[0].pageX : t.pageX) - this.offsetLeft - this.offsetWidth / 2 }, !1), document.addEventListener(l, function (n) { if (!i.values[e]) return !1; n.preventDefault(), n.stopPropagation(), (a = ((s ? n.touches[0].pageX : n.pageX) - u) / i.values.size * 100) < 0 ? a = 0 : a > 100 && (a = 100), t.style.left = a + "%", i.setValues(a) }, !1), document.addEventListener(d, function (t) { t.stopPropagation(), i.values[e] = !1 }, !1), this.tags.handleRange.addEventListener(d, function (u) { u.stopPropagation(), u.preventDefault(), i.values[e] = !1, (a = ((s ? u.touches[0].pageX : u.pageX) - i.tags.slider.getBoundingClientRect().left) / i.values.size * 100) < 0 ? a = 0 : a > 100 && (a = 100), t.style.left = a + "%", i.setValues(a) }, !1), this }, extend: function (t, e) { for (var s in e) e.hasOwnProperty(s) && (t[s] = e[s]); return t } }, window.Slider = e }(window);